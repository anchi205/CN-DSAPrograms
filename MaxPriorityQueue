#include <iostream>
using namespace std;

#include "solution.h"

int main() {
    PriorityQueue pq;
    int choice;
    cin >> choice;

    while (choice != -1) {
        switch (choice) {
            case 1:  // insert
                int element;
                cin >> element;
                pq.insert(element);
                break;
            case 2:  // getMax
                cout << pq.getMax() << "\n";
                break;
            case 3:  // removeMax
                cout << pq.removeMax() << "\n";
                break;
            case 4:  // size
                cout << pq.getSize() << "\n";
                break;
            case 5:  // isEmpty
                cout << (pq.isEmpty() ? "true\n" : "false\n");
            default:
                return 0;
        }
        
        cin >> choice;
    }
}


#include<vector>
class PriorityQueue {
    // Declare the data members here
    vector<int> pq;
   public:
    PriorityQueue() {
        
    }

    /**************** Implement all the public functions here ***************/

    void insert(int element) {            //   Given an element, insert that element in the priority queue at the correct position.
        pq.push_back(element);
		
		int childIndex = pq.size() - 1;  // Last index

		while(childIndex > 0) { // Till it reaches root
			int parentIndex = (childIndex - 1) / 2;

			if(pq[childIndex] > pq[parentIndex]) {
				int temp = pq[childIndex];
				pq[childIndex] = pq[parentIndex];
				pq[parentIndex] = temp;
			}
			else {
				break;
			}
			childIndex = parentIndex;
		}
    }

    int getMax() {       // Return the maximum element present in the priority queue without deleting. Return -Infinity if priority queue is empty.
        if(isEmpty()) {
			return 0;		// Priority Queue is empty
		}
		return pq[0];
    }

    int removeMax() {         // Delete and return the maximum element present in the priority queue. Return -Infinity if priority queue is empty.
        if(isEmpty()) {
			return 0;		// Priority Queue is empty
		}
		int ans = pq[0];
		pq[0] = pq[pq.size() - 1];
		pq.pop_back();

		// down-heapify

		int parentIndex = 0;
		int leftChildIndex = 2 * parentIndex + 1;
		int rightChildIndx = 2 * parentIndex + 2;
	
		while(leftChildIndex < pq.size()) {
			int maxIndex = parentIndex;
			if(pq[maxIndex] < pq[leftChildIndex]) {
				maxIndex = leftChildIndex;
			}
			if(rightChildIndx < pq.size() && pq[rightChildIndx] > pq[maxIndex]) {
				maxIndex = rightChildIndx;
			}
			if(maxIndex == parentIndex) {
				break;
			}
			int temp = pq[maxIndex];
			pq[maxIndex] = pq[parentIndex];
			pq[parentIndex] = temp;
		
			parentIndex = maxIndex;
			leftChildIndex = 2 * parentIndex + 1;
			rightChildIndx = 2 * parentIndex + 2;
		}

		return ans;
    }

    int getSize() {                     // Returns the size of priority queue i.e. number of elements present in the priority queue.
        return pq.size();
    }

    bool isEmpty() {                    // Check if priority queue is empty or not. Return true or false accordingly.
        return pq.size() == 0;
    }
};
